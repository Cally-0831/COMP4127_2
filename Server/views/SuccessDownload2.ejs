<section class="hero is-info">
    <div class="hero-body">

        <p class="title"> Successfully DEcrypted and Downloaded</p>
        <%console.log("\n",filecontent) ; filecontent=filecontent.toString("base64");
        %>
    </div>
</section>
<div class="columns is-mobile is-centered">
    <div class="column is-half ">

        <div id="filenamename" value='<%=filenamename%>' hidden>
            <%=filenamename%>
        </div>
        <div id="filecontent" value='<%=filecontent%>' hidden>
            <%=filecontent%>
        </div>

        <div class="column is-half ">
            <a href="/">
                <img src="../images/home.jpg" alt="Dinosaur" style="width: 100%;" />

            </a>
        </div>


    </div>
    <script>
        // Assuming 'blob' is the Blob object you created
        const mimeTypes = {
            '.txt': 'text/plain',
            '.pdf': 'application/pdf',
            '.doc': 'application/msword',
            '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            '.xls': 'application/vnd.ms-excel',
            '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            '.png': 'image/png',
            '.jpg': 'image/jpeg',
            '.jpeg': 'image/jpeg',
            '.gif': 'image/gif',
            // Add other file types and MIME types as needed
        };

        // Function to get MIME type based on file extension
        function getMimeType(fileName) {
            // Extract the file extension
            const extension = fileName.slice(((fileName.lastIndexOf(".") - 1) >>> 0) + 2);
            // Lookup the MIME type in the dictionary
            return mimeTypes['.' + extension.toLowerCase()] || 'application/octet-stream';
        }

        // Example usage:
        const fileName = document.getElementById('filenamename').getAttribute('value');
        const mimeType = getMimeType(fileName); // 'image/png'

        console.log(mimeType)

        // function base64ToBlob(base64, mimeType) {
        //     // Decode the base64 string to an array of character codes
        //     console.log(base64)
        //     const byteCharacters = window.atob(base64);

        //     // Create an array of the character codes
        //     const byteNumbers = new Array(byteCharacters.length);
        //     for (let i = 0; i < byteCharacters.length; i++) {
        //         byteNumbers[i] = byteCharacters.charCodeAt(i);
        //     }

        //     // Convert the array of character codes to a Uint8Array
        //     const byteArray = new Uint8Array(byteNumbers);

        //     // Create a blob from the Uint8Array
        //     const blob = new Blob([byteArray], { type: mimeType });

        //     return blob;
        // }
        function base64ToBlob2(base64, mimeType) {
            // Decode the base64 string to an array of character codes
            var decodedStringAtoB = window.atob(base64);
            var decodedStringAtoB2 = decodedStringAtoB.toString().split(",")[1]
            const byteCharacters = window.atob(decodedStringAtoB2)
            // const byteNumbers = new Array(window.atob(decodedStringAtoB).length);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);

            // Create a blob from the Uint8Array
            const blob = new Blob([byteArray], { type: mimeType });

            return blob;
        }

        // const imageBlob = base64ToBlob(document.getElementById('filecontent').getAttribute('value').toString("base64"),  "application/octet-stream" );
        const Blob2 = base64ToBlob2(document.getElementById('filecontent').getAttribute('value').toString("base64"), "application/octet-stream");


        const link = document.createElement('a');
        // Create a URL for the blob
        const url = window.URL.createObjectURL(Blob2);

        link.href = url;

        // var encodeddocument.getElementById('filecontent').getAttribute('value')
        link.download = document.getElementById('filenamename').getAttribute('value')// You can give a default name, but the extension is unknown

        // Append the link to the body (usually not necessary to add it to the DOM to trigger the download)
        document.body.appendChild(link);

        // Programmatically click the link to trigger the download
        link.click();

        // Clean up by revoking the Object URL and removing the link element
        URL.revokeObjectURL(url);
        document.body.removeChild(link);
       

    </script>